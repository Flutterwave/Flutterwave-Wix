type HostModule<T, H extends Host> = {
    __type: 'host';
    create(host: H): T;
};
type HostModuleAPI<T extends HostModule<any, any>> = T extends HostModule<infer U, any> ? U : never;
type Host<Environment = unknown> = {
    channel: {
        observeState(callback: (props: unknown, environment: Environment) => unknown): {
            disconnect: () => void;
        } | Promise<{
            disconnect: () => void;
        }>;
    };
    environment?: Environment;
};

type RESTFunctionDescriptor<T extends (...args: any[]) => any = (...args: any[]) => any> = (httpClient: HttpClient) => T;
interface HttpClient {
    request<TResponse, TData = any>(req: RequestOptionsFactory<TResponse, TData>): Promise<HttpResponse<TResponse>>;
}
type RequestOptionsFactory<TResponse = any, TData = any> = (context: any) => RequestOptions<TResponse, TData>;
type HttpResponse<T = any> = {
    data: T;
    status: number;
    statusText: string;
    headers: any;
    request?: any;
};
type RequestOptions<_TResponse = any, Data = any> = {
    method: 'POST' | 'GET' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';
    url: string;
    data?: Data;
    params?: URLSearchParams;
} & APIMetadata;
type APIMetadata = {
    methodFqn?: string;
    entityFqdn?: string;
    packageName?: string;
};
type BuildRESTFunction<T extends RESTFunctionDescriptor> = T extends RESTFunctionDescriptor<infer U> ? U : never;

type AuthenticationStrategy<Host = unknown, WithAuth extends ((...args: any) => AuthenticationStrategy<Host, WithAuth>) | undefined = undefined> = {
    getAuthHeaders: (host: Host) => Promise<{
        headers: Record<string, string>;
    }>;
    decodeJWT?: (token: string, verifyCallerClaims?: boolean) => Promise<{
        decoded: {
            data: string;
        };
        valid: boolean;
    }>;
    withAuth?: WithAuth;
};
type BoundAuthenticationStrategy = {
    getAuthHeaders: () => Promise<{
        headers: Record<string, string>;
    }>;
};

type EventDefinition<Payload = unknown, Type extends string = string> = {
    type: Type;
    isDomainEvent?: boolean;
    __payload: Payload;
};
declare function EventDefinition<Type extends string>(type: Type, isDomainEvent?: boolean): <Payload = unknown>() => EventDefinition<Payload, Type>;
type DomainEvent<ActionType extends 'create' | 'update' | 'delete' | 'action', Payload> = {
    id: string;
    entityFqdn: string;
    slug: string;
    entityId: string;
    eventTime: Date;
    triggeredByAnonymizeRequest: boolean;
    originatedFrom: string;
} & (ActionType extends 'action' ? {
    actionEvent: {
        body: Payload;
    };
} : ActionType extends 'create' ? {
    createdEvent: {
        entity: Payload;
    };
} : ActionType extends 'update' ? {
    updatedEvent: {
        currentEntity: Payload;
    };
} : ActionType extends 'delete' ? {
    deletedEvent: Payload;
} : never);

type SPIDefinition<TInput, TResult> = {
    __input: TInput;
    __result: TResult;
};

export { type APIMetadata, type AuthenticationStrategy, type BoundAuthenticationStrategy, type BuildRESTFunction, type DomainEvent, EventDefinition, type Host, type HostModule, type HostModuleAPI, type HttpClient, type HttpResponse, type RESTFunctionDescriptor, type RequestOptions, type RequestOptionsFactory, type SPIDefinition };
