"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.partiallyUpdateSecret = exports.deleteSecret = exports.createSecret = exports.listSecretInfo = exports.getSecretValue = void 0;
const metro_runtime_1 = require("@wix/metro-runtime");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const metro_runtime_2 = require("@wix/metro-runtime");
function resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl(opts) {
    const domainToMappings = {
        'service.wix-code.com': [
            {
                srcPath: '/_api/cloud-secrets-vault-server',
                destPath: '',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/cloud-secrets-vault-server',
                destPath: '',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/cloud-secrets-vault-server',
                destPath: '',
            },
        ],
        'service-int.wix-code.com': [
            {
                srcPath: '/_api/cloud-secrets-vault-server',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/_api/cloud-secrets-vault-server',
                destPath: '',
            },
        ],
    };
    return (0, metro_runtime_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
/**
 * Retrieves the secret value specified by the secret name.
 *
 * The `getSecretValue()` function returns a Promise that resolves to the value of the secret with the specified given name.
 *
 * >**Note:**
 * > Only use a secret's value in the backend code. Returning the secret value in the frontend is a security risk.
 */
function getSecretValue(payload) {
    function __getSecretValue({ host }) {
        const metadata = {
            entityFqdn: 'wix.velo.secrets_vault.v1.secret',
            method: 'GET',
            methodFqn: 'wix.velo.secrets_vault.v1.SecretsVaultService.GetSecretValue',
            url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
                protoPath: '/api/v1/secrets/name/{name}',
                data: payload,
                host,
            }),
            params: (0, metro_runtime_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __getSecretValue;
}
exports.getSecretValue = getSecretValue;
/**
 * Retrieves a list of objects containing information about all secrets.
 *
 * The `listSecretInfo()` function returns a Promise that resolves to a list containing information about all secrets stored on your site.
 *
 * > **Note:**
 * > - The secret's value does not get returned for security reasons. To retrieve a secret's value, use the [`getSecretValue()`](#getSecretValue) function.
 */
function listSecretInfo(payload) {
    function __listSecretInfo({ host }) {
        const metadata = {
            entityFqdn: 'wix.velo.secrets_vault.v1.secret',
            method: 'GET',
            methodFqn: 'wix.velo.secrets_vault.v1.SecretsVaultService.ListSecretInfo',
            url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
                protoPath: '/api/v1/secrets',
                data: payload,
                host,
            }),
            params: (0, metro_runtime_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'secrets.createdDate' },
                        { path: 'secrets.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __listSecretInfo;
}
exports.listSecretInfo = listSecretInfo;
/**
 * Creates a new secret.
 *
 * The `createSecret()` function returns a Promise that resolves secret ID when the secret is created.
 *
 * >**Notes:**
 * > - The secret's name cannot start with `'wix'` or be identical to an existing secret's name.
 * > - Don't leave private keys in your code. Leaving them in your code is a security risk. Make sure to delete the keys from the code after running `createSecret()`.
 */
function createSecret(payload) {
    function __createSecret({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [{ path: 'secret.createdDate' }, { path: 'secret.updatedDate' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.velo.secrets_vault.v1.secret',
            method: 'POST',
            methodFqn: 'wix.velo.secrets_vault.v1.SecretsVaultService.CreateSecret',
            url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
                protoPath: '/api/v1/secrets',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __createSecret;
}
exports.createSecret = createSecret;
/**
 * Deletes an existing secret by ID.
 *
 * The `deleteSecret()` function returns a Promise that resolves when the secret is deleted. You can retrieve the secret `_id` using the [`listSecretInfo()`](#listsecretinfo) function.
 *
 * >**Note:**
 * > Deleting a secret is irreversible and will break all code using the secret.
 *
 */
function deleteSecret(payload) {
    function __deleteSecret({ host }) {
        const metadata = {
            entityFqdn: 'wix.velo.secrets_vault.v1.secret',
            method: 'DELETE',
            methodFqn: 'wix.velo.secrets_vault.v1.SecretsVaultService.DeleteSecret',
            url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
                protoPath: '/api/v1/secrets/{id}',
                data: payload,
                host,
            }),
            params: (0, metro_runtime_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteSecret;
}
exports.deleteSecret = deleteSecret;
/**
 * Updates the specified fields of an existing secret by ID.
 *
 *
 * The `updateSecret()` function returns a Promise that resolves when the secret is successfully updated. You can update one or more fields. Only fields passed in the `secret` object will be updated. All other properties will remain unchanged.
 *
 * You can retrieve the `_id` parameter from the [`listSecretInfo()`](#listsecretinfo) function. The secret `_id` is different from the secret `name` used by the [`getSecretValue()`](#getsecretvalue) function.
 *
 * > **Notes:**
 * > - Changing a secret's name or value will break all code using the secret.
 * > - You can't rename the secret with a name of an existing secret.
 * > - Don't leave private keys in your code! Leaving them in is a security risk. Make sure to delete the keys from the code after running `updateSecret()`.
 */
function partiallyUpdateSecret(payload) {
    function __partiallyUpdateSecret({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [{ path: 'secret.createdDate' }, { path: 'secret.updatedDate' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.velo.secrets_vault.v1.secret',
            method: 'PATCH',
            methodFqn: 'wix.velo.secrets_vault.v1.SecretsVaultService.PartiallyUpdateSecret',
            url: resolveWixVeloSecretsVaultV1SecretsVaultServiceUrl({
                protoPath: '/api/v1/secrets/{id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __partiallyUpdateSecret;
}
exports.partiallyUpdateSecret = partiallyUpdateSecret;
//# sourceMappingURL=velo-secrets-vault-v1-secret.http.js.map