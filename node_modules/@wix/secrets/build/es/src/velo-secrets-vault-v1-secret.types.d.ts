export interface Secret {
    /**
     * A globally-unique, immutable identifier assigned to the secret upon creation.
     * @readonly
     */
    id?: string | null;
    /** A unique, human-friendly name for the secret. Used for retrieving the secret easily at runtime. */
    name?: string | null;
    /** An optional text describing the secret's purpose or any other notes about it. */
    description?: string | null;
    /** The confidential value that is intended to be stored encrypted. */
    value?: string | null;
    /**
     * The creation timestamp of the secret.
     * @readonly
     */
    createdDate?: Date;
    /**
     * The last-update timestamp of the secret.
     * @readonly
     */
    updatedDate?: Date;
}
export interface GetSecretValueRequest {
    /** The name of the secret to get the value of. */
    name: string;
}
export interface GetSecretValueResponse {
    /** The plaintext, unencrypted value of the secret. */
    value?: string;
}
export interface ListSecretInfoRequest {
}
export interface ListSecretInfoResponse {
    /** A list of info object for each secret, without the secret value itself */
    secrets?: Secret[];
}
export interface CreateSecretRequest {
    /** A set of fields including info and the actual value to protect. */
    secret: Secret;
}
export interface CreateSecretResponse {
    /** The globally-unique ID assigned to the secret by the service. */
    id?: string;
}
export interface DeleteSecretRequest {
    /** The unique ID of the secret to be deleted. */
    id: string;
}
export interface DeleteSecretResponse {
}
export interface UpdateSecretRequest {
    /** The unique ID of the secret to be updated. */
    id: string;
    /** The secret fields to update. */
    secret: Secret;
}
export interface UpdateSecretResponse {
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp. */
    eventTime?: Date;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface GetSecretValueResponseNonNullableFields {
    value: string;
}
export interface ListSecretInfoResponseNonNullableFields {
    secrets: Secret[];
}
export interface CreateSecretResponseNonNullableFields {
    id: string;
}
