var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { serializer } from '@wix/metro-runtime/velo';
import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import * as ambassadorWixVeloSecretsVaultV1Secret from './velo-secrets-vault-v1-secret.http';
let __verbose = false;
function __log(...args) {
    __verbose && console.log(...args);
}
function __inspect(obj) {
    return obj;
}
export const __debug = {
    verboseLogging: {
        on: () => (__verbose = true),
        off: () => (__verbose = false),
    },
};
const _toVeloEntity = '$';
const _fromVeloEntity = '$';
const _createSecretRequest = {};
const _createSecretResponse = {};
const _deleteSecretRequest = {};
const _deleteSecretResponse = {};
const _getSecretValueRequest = {};
const _getSecretValueResponse = {};
const _listSecretInfoRequest = {};
const _listSecretInfoResponse = {};
const _updateSecretRequest = {};
const _updateSecretResponse = {};
/**
 * Retrieves the secret value specified by the secret name.
 *
 * The `getSecretValue()` function returns a Promise that resolves to the value of the secret with the specified given name.
 *
 * >**Note:**
 * > Only use a secret's value in the backend code. Returning the secret value in the frontend is a security risk.
 * @public
 * @documentationMaturity preview
 * @requiredField name
 * @param name - The name of the secret to get the value of.
 * @returns Fulfilled - The value of the secret. Rejected - Error message.
 */
export function getSecretValue(name) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { name: '$[0]' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _getSecretValueRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _getSecretValueResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([name]);
        const reqOpts = ambassadorWixVeloSecretsVaultV1Secret.getSecretValue(payload);
        __log(`"GetSecretValue" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { name: '$[0]' },
                singleArgumentUnchanged: false,
            }, ['name']);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Retrieves a list of objects containing information about all secrets.
 *
 * The `listSecretInfo()` function returns a Promise that resolves to a list containing information about all secrets stored on your site.
 *
 * > **Note:**
 * > - The secret's value does not get returned for security reasons. To retrieve a secret's value, use the [`getSecretValue()`](#getSecretValue) function.
 * @public
 * @documentationMaturity preview
 * @returns Fulfilled - A list of objects containing information about your site's secrets. Rejected - Error message.
 */
export function listSecretInfo() {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = {};
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[0];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _listSecretInfoRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _listSecretInfoResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['Array#secrets']],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([]);
        const reqOpts = ambassadorWixVeloSecretsVaultV1Secret.listSecretInfo(payload);
        __log(`"ListSecretInfo" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: {},
                singleArgumentUnchanged: false,
            }, []);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Creates a new secret.
 *
 * The `createSecret()` function returns a Promise that resolves secret ID when the secret is created.
 *
 * >**Notes:**
 * > - The secret's name cannot start with `'wix'` or be identical to an existing secret's name.
 * > - Don't leave private keys in your code. Leaving them in your code is a security risk. Make sure to delete the keys from the code after running `createSecret()`.
 * @public
 * @documentationMaturity preview
 * @requiredField secret
 * @requiredField secret.name
 * @requiredField secret.value
 * @param secret - Fields of a new secret.
 * @returns Fulfilled - The ID of the created secret.
 * Rejected - Error message.
 */
export function createSecret(secret) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { secret: '$[0]' };
        const responseTransformation = '$._id';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _createSecretRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['secret']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _createSecretResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([secret]);
        const reqOpts = ambassadorWixVeloSecretsVaultV1Secret.createSecret(payload);
        __log(`"CreateSecret" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
            return fromJSON(result.data);
        }
        catch (err) {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { secret: '$[0]' },
                singleArgumentUnchanged: false,
            }, ['secret']);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Deletes an existing secret by ID.
 *
 * The `deleteSecret()` function returns a Promise that resolves when the secret is deleted. You can retrieve the secret `_id` using the [`listSecretInfo()`](#listsecretinfo) function.
 *
 * >**Note:**
 * > Deleting a secret is irreversible and will break all code using the secret.
 *
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @param _id - The unique ID of the secret to be deleted.
 * @returns Fulfilled - When the secret is successfully deleted. Rejected - Error message.
 */
export function deleteSecret(_id) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { id: '$[0]' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[1];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _deleteSecretRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _deleteSecretResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([_id]);
        const reqOpts = ambassadorWixVeloSecretsVaultV1Secret.deleteSecret(payload);
        __log(`"DeleteSecret" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
        }
        catch (err) {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { id: '$[0]' },
                singleArgumentUnchanged: false,
            }, ['_id']);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
/**
 * Updates the specified fields of an existing secret by ID.
 *
 *
 * The `updateSecret()` function returns a Promise that resolves when the secret is successfully updated. You can update one or more fields. Only fields passed in the `secret` object will be updated. All other properties will remain unchanged.
 *
 * You can retrieve the `_id` parameter from the [`listSecretInfo()`](#listsecretinfo) function. The secret `_id` is different from the secret `name` used by the [`getSecretValue()`](#getsecretvalue) function.
 *
 * > **Notes:**
 * > - Changing a secret's name or value will break all code using the secret.
 * > - You can't rename the secret with a name of an existing secret.
 * > - Don't leave private keys in your code! Leaving them in is a security risk. Make sure to delete the keys from the code after running `updateSecret()`.
 * @param _id - The unique ID of the secret to be updated.
 * @param secret - The secret fields to update.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField secret
 * @returns Fulfilled - When the secret is updated.
 * Rejected - Error message.
 */
export function updateSecret(_id, secret) {
    var _a, _b, _c;
    return __awaiter(this, arguments, void 0, function* () {
        const requestTransformation = { id: '$[0]', secret: '$[1]' };
        const responseTransformation = '$';
        // @ts-ignore
        const { httpClient, sideEffects } = arguments[2];
        const { toAmbassadorRequest } = serializer({
            rootSchema: _updateSecretRequest,
            depSchemas: {},
            fqdnTransformation: {
                paths: [...['secret']],
                transformation: _fromVeloEntity,
            },
            customTransformation: requestTransformation,
        });
        const { fromJSON } = serializer({
            rootSchema: _updateSecretResponse,
            depSchemas: {},
            fqdnTransformation: {
                paths: [],
                transformation: _toVeloEntity,
            },
            customTransformation: responseTransformation,
        });
        const payload = toAmbassadorRequest([_id, secret]);
        const reqOpts = ambassadorWixVeloSecretsVaultV1Secret.partiallyUpdateSecret(payload);
        __log(`"PartiallyUpdateSecret" sending request with: ${__inspect(reqOpts)}`);
        (_a = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSiteCall) === null || _a === void 0 ? void 0 : _a.call(sideEffects);
        try {
            const result = yield httpClient.request(reqOpts);
            (_b = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onSuccess) === null || _b === void 0 ? void 0 : _b.call(sideEffects, result);
        }
        catch (err) {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { id: '$[0]', secret: '$[1]' },
                singleArgumentUnchanged: false,
            }, ['_id', 'secret']);
            (_c = sideEffects === null || sideEffects === void 0 ? void 0 : sideEffects.onError) === null || _c === void 0 ? void 0 : _c.call(sideEffects, err);
            throw transformedError;
        }
    });
}
//# sourceMappingURL=velo-secrets-vault-v1-secret.universal.js.map